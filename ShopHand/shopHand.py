'''
ShopHand: 
This file holds all the functions that the interface script interacts with to ensure
that the user gets the data they want.
Author: Breann Thiessen
'''

import sqlite3
from datetime import date
import pickle #used to save the jobID and allow the jobID to constantly be a unique key

#jobs to be chosen from
jobs = ["None", "Brakes", "Head Lights", "Oil Change", "Tail Lights", "U-Joints", "Wheel Bearings"]
chosenJob = "" #holds the job chosen
chosenUnits = [] #holds all units
startDate = str(date.today()) #holds the start date for repair report
endDate = str(date.today()) #holds the end date for repair report

#---------------------------VARIABLE FUNCTIONS-----------------------------#
#will add the unit to the chosenUnits list
def addUnit(unit):
    global chosenUnits
    if(unit not in chosenUnits):
        chosenUnits.append(unit)

#removes the unchecked unit from the chosenUnits list
def delUnit(unit):
    global chosenUnits
    if(unit in chosenUnits):
        chosenUnits.remove(unit)
      
#saves the job the user has picked
def saveJob(job):
    global chosenJob
    chosenJob = job

#sets the start date the user picked to generate a report
def setStartDate(date):
    global startDate
    startDate = str(date)

#sets the end date the picked to generate a report
def setEndDate(date):
    global endDate
    endDate = str(date)

#---------------------------DB FUNCTIONS-----------------------------#
#this function is called when the user pushes the "print job list" button
#The tool and parts list are generated by querying the Sqlite3 database
#they are printed out for the user.
def getToolPart(e):
    global chosenJob
    width = 21 #used to format the list
    #still need to generate a PDF
    if (chosenJob != 'None'):
        if len(chosenUnits) > 0:
            for x in range(len(chosenUnits)):
                global jobID 
                conn = sqlite3.connect("testShop.db")
                c = conn.cursor()
                print("UNIT %d: %s\n" % (chosenUnits[x], chosenJob))
                print("Tool Name             Quantity")
                c.execute('''SELECT Tool_List.Tool_name, Tool_List.Quantity
                             FROM Tool_List
                             WHERE Tool_List.Job_name = '%s' and Tool_List.VIN =
                             (SELECT Truck.VIN FROM Truck WHERE Unit_number = %d)
                             ''' % (chosenJob, chosenUnits[x]))
                y = c.fetchall()
                for x in range(len(y)):
                    print("%s %d" %(y[x][0].ljust(width), y[x][1]))
                #insertJob(c, conn, chosenUnits[x])
                #print("\nPart Name          Quantity")
                c.execute("SELECT Job.Time_needed FROM Job WHERE Job.Job_name = '%s'" %(chosenJob))
                y = c.fetchone()[0]
                print("\nHours Needed: %d".ljust(width) % (y))
                conn.close()
    else:
        pass

 
#this function is called when the user chooses to print a job list,
#when they choose to print the job list then the job is inserted into the
#database
def insertJob(c, conn, unit):
    global jobID 
    global chosenJob
    fileIn = open("job.pickle", "rb")
    jobID = pickle.load(fileIn)
    print("Job ID %d" % jobID)
    fileIn.close()
    #get the VIN of the truck that will be worked on
    c.execute('''SELECT T.VIN
                 FROM Truck as T
                 WHERE T.Unit_number = %d
                 ''' % unit)
    #save that VIN so it can be inserted into the table
    vin = c.fetchone()[0]
    today = date.today()
    c.execute('''INSERT INTO Repair_Job VALUES('%d','%s','%s','%s')
              ''' % (jobID, str(today), chosenJob, vin))
    conn.commit()
    jobID = jobID + 1
    fileOut= open("job.pickle", "wb")
    pickle.dump(jobID, fileOut)
    fileOut.close()

#this function is called when the user requests to print a repair report
#the dates are used as a range to get the information from querying the database
#the results are printed out for the user
def getReport(e): 
    global startDate
    global endDate
    shopCost = 95.0
    wage = 35.0
    if(startDate > endDate):
        print("ERROR: Your Start Date is After Your End Date")
    #generate the report
    else:
       print("REPAIR REPORT: %s to %s" %(startDate, endDate))
       print("Date               Unit               Job Name                Total Cost")
       conn = sqlite3.connect("testShop.db")
       c = conn.cursor() # used to find the jobs
       #query finds the date of the job, unit nnumber, job name, and hours to complete that job
       c.execute('''SELECT R.Date, T.Unit_number, R.Job_name, J.Time_needed
             FROM Repair_Job as R, Truck as T, Job as J
             WHERE R.VIN = T.VIN and R.Date >= '%s' and R.Date <= '%s' and R.Job_name = J.Job_name
          ''' %(startDate, endDate))      
       y = c.fetchall()
       for x in range(len(y)):
          cost = (y[x][3] * shopCost) + (y[x][3] * wage)
          print("%s %s %s $%.2f" %(y[x][0].ljust(18), str(y[x][1]).ljust(18), y[x][2].ljust(23), cost))